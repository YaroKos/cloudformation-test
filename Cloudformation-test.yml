---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation test template

Parameters:
  Prefix:
    Description: Prefix for all resources being created
    Type: String
    Default: ""
  ImageId:
    Description: Image Id used in launch template
    Type: String
    Default: "ami-026b57f3c383c2eec"
  InstanceSize:
    Description: Instance size/family used in launch template
    Type: String
    Default: "t2.micro"
  BlockDeviceName:
    Description: The device name (for example, /dev/sdh or xvdh)
    Type: String
    Default: "/dev/sdh"
  DiskType:
    Description: EBS volume type used in launch template
    Type: String
    Default: "gp2"
  DiskSize:
    Description: EBS volume size used in launch template
    Type: String
    Default: "8"
  AsgMinSize:
    Description: Auto scaling group minimum size
    Type: String
    Default: "3"
  AsgMaxSize:
    Description: Auto scaling group maximum size
    Type: String
    Default: "5"
  AsgDesired:
    Description: Auto scaling group desired size
    Type: String
    Default: "3"
  IpWhitelist:
    Description: IP address used to access instances (for example, a single IPv4 address with the /32 prefix length or a range of IPv4 addresses in CIDR block notation)
    Type: String
    Default: "0.0.0.0/0"
  KeyPairName:
    Description: The name of the key pair used to connect to ec2 instances.
    Type: String
    Default: ""
      
Mappings:
  ElbRegionMap:
    us-east-1: 
      ElbRegionValue: 127311923021
    us-east-2:
      ElbRegionValue: 033677994240
    us-west-1:
      ElbRegionValue: 027434742980
    us-west-2:
      ElbRegionValue: 797873946194
    af-south-1:
      ElbRegionValue: 098369216593
    ap-east-1:
      ElbRegionValue: 754344448648
    ap-northeast-1:
      ElbRegionValue: 582318560864
    ap-northeast-2:
      ElbRegionValue: 600734575887
    ap-northeast-3:
      ElbRegionValue: 383597477331
    ap-southeast-1:
      ElbRegionValue: 114774131450
    ap-southeast-2:
      ElbRegionValue: 783225319266
    ap-southeast-3:
      ElbRegionValue: 589379963580
    ap-south-1:
      ElbRegionValue: 718504428378
    me-south-1:
      ElbRegionValue: 076674570225
    ca-central-1:
      ElbRegionValue: 985666609251
    eu-central-1:
      ElbRegionValue: 054676820928
    eu-west-1:
      ElbRegionValue: 156460612806
    eu-west-2:
      ElbRegionValue: 652711504416
    eu-south-1:
      ElbRegionValue: 635631232127
    eu-west-3:
      ElbRegionValue: 009996457667
    eu-north-1:
      ElbRegionValue: 897822967062
    sa-east-1:
      ElbRegionValue: 507241528517
    us-gov-west-1:
      ElbRegionValue: 048591011584
    us-gov-east-1:
      ElbRegionValue: 190560391635

Resources:
  RoleForEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Prefix}instance-service-role-cloudwatch-metrics'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: !Sub '${Prefix}instance-service-policy-cloudwatch-metrics'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - ec2:DescribeVolumes
            - ec2:DescribeTags
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            - logs:DescribeLogGroups
            - logs:CreateLogStream
            - logs:CreateLogGroup
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:PutParameter
            Resource:
            - arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*
  
  InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Prefix}instance-profile-cloudwatch-metrics'
      Path: "/"
      Roles: 
        - !Ref RoleForEC2
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group which allows http, https and ssh
      GroupName: !Sub '${Prefix}sg-allow-http-https-ssh'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref IpWhitelist
      VpcId: !GetAtt VPC.VpcId
  
  LaunchTemplateForASG:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${Prefix}launch-template-for-asg-with-nginx-and-cwa'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !GetAtt SecurityGroup.GroupId
            DeleteOnTermination: true
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceSize
        BlockDeviceMappings: 
          - DeviceName: !Ref BlockDeviceName
            Ebs:
              VolumeSize: !Ref DiskSize
              VolumeType: !Ref DiskType
              DeleteOnTermination: true
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        KeyName: !Ref KeyPairName
        Monitoring:
          Enabled: true
        MetadataOptions:
          HttpEndpoint: enabled
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              sudo yum update -y
              sudo amazon-linux-extras install nginx1 -y 
              sudo systemctl enable nginx
              sudo systemctl start nginx
              sudo chmod 646 /usr/share/nginx/html/index.html
              curl -sL http://169.254.169.254/latest/meta-data/public-hostname > /usr/share/nginx/html/index.html
              sudo yum install amazon-cloudwatch-agent -y
              sudo touch /opt/aws/amazon-cloudwatch-agent/bin/config.json
              sudo chmod 646 /opt/aws/amazon-cloudwatch-agent/bin/config.json
              sudo yum install jq -y
              sudo echo -e '{"agent": {"metrics_collection_interval": 60, "run_as_user": "root"}, "metrics": {"append_dimensions": {"InstanceId": "${!aws:InstanceId}"}, "metrics_collected": {"collectd": {"metrics_aggregation_interval": 60}, "mem": {"measurement": ["mem_used_percent"], "metrics_collection_interval": 60}, "statsd": {"metrics_aggregation_interval": 60, "metrics_collection_interval": 60, "service_address": ":8125"} } } }' | jq '.' > /opt/aws/amazon-cloudwatch-agent/bin/config.json
              sudo mkdir /usr/share/collectd
              sudo touch /usr/share/collectd/types.db
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a start
  
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${Prefix}asg-with-nginx-and-cloudwatch-agent'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateForASG
        Version: !GetAtt LaunchTemplateForASG.LatestVersionNumber
      MaxSize: !Ref AsgMaxSize
      MinSize: !Ref AsgMinSize
      DesiredCapacity: !Ref AsgDesired
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs: 
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Prefix}alb-in-public'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !GetAtt SecurityGroup.GroupId
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LogsS3Bucket
        - Key: access_logs.s3.prefix
          Value: alb_logs
      
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: 1
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Prefix}target-group-http'
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Port: 80
      VpcId: !GetAtt VPC.VpcId
  
  LogsS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub '${Prefix}${AWS::AccountId}-application-load-balancer-logs-bucket'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LogsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref LogsS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - Fn::FindInMap:
                    - ElbRegionMap
                    - !Ref AWS::Region
                    - ElbRegionValue
                  - ':root'
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${LogsS3Bucket}/alb_logs/AWSLogs/${AWS::AccountId}/*'
          - Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${LogsS3Bucket}/alb_logs/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${LogsS3Bucket}'
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !GetAtt VPC.VpcId
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Sub '${AWS::Region}a'
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !GetAtt VPC.VpcId
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub '${AWS::Region}b'
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !GetAtt InternetGateway.InternetGatewayId
      VpcId: !GetAtt VPC.VpcId
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !GetAtt VPC.VpcId
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
     - InternetGateway
     - InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !GetAtt VPC.VpcId
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Sub '${AWS::Region}a'
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !GetAtt VPC.VpcId
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Sub '${AWS::Region}b'
      
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !GetAtt VPC.VpcId
      
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !GetAtt VPC.VpcId
      
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
      
  ElasticIP1:
    Type: AWS::EC2::EIP
    
  ElasticIP2:
    Type: AWS::EC2::EIP
    
  PublicNATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      
  PublicNATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: PublicNATGateway1
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt PublicNATGateway1.NatGatewayId
      RouteTableId: !Ref PrivateRouteTable1
      
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: PublicNATGateway2
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt PublicNATGateway2.NatGatewayId
      RouteTableId: !Ref PrivateRouteTable2
      
Outputs:
  LoadBalancerDNSName:
    Description: Application load balancer DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  
  LogsS3BucketName:
    Description: S3 bucket for the load balancer logs
    Value: !Ref LogsS3Bucket
